{"version":3,"sources":["components/Login/Login.js","components/UI/Button/Button.js","components/Navigation/NavigationItem/NavigationItem.js","components/Navigation/Navigation.js","components/EmployeeCards/EmployeeCard/EmployeeCard.js","components/EmployeeCards/EmployeeCards.js","components/UI/Footer/Footer.js","components/UI/Spinner/Spinner.js","components/AddEmployee/AddEmployee.js","containers/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["login","props","react_default","a","createElement","className","style","height","paddingTop","type","onChange","toggleIsHrLogin","checked","isHrLogin","placeholder","name","changeInputFieldsHandler","onClick","submitLoginHandler","loginError","button","buttonClassNames","concat","classes","active","btnColor","clicked","title","navigationItem","Button","navigation","navigationList","navigationItems","map","item","i","NavigationItem","key","href","data-toggle","data-target","id","employeeCard","empId","empName","empAge","empJoinDate","empAccountNumber","cardButtons","employeeCards","card","EmployeeCard","footer","Date","getFullYear","spinner","AddEmployee","employee","goBackHandler","defaultValue","firstName","changeEmployeeFieldsHandler","lastName","age","dateOfBirth","maritalStatus","gender","hiringDate","joiningDate","jobId","nameOfSchool","degree","startDate","endDate","amount","isMonthly","pattern","phoneNumber","email","address","submitPatchEmployeeHandler","submitText","Dashboard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updatedNavItemsFor","dashboard","arguments","length","undefined","setState","prevState","navItems","objectSpread","keys","forEach","defineProperty","updateEmployeeId","deleteEmployeeHandler","emploeeId","employees","hrDashboard","filter","employeeId","updateEmployeeHandler","console","log","dashboardLoading","loading","event","state","toConsumableArray","employeeIndex","findIndex","target","value","newEmployee","asyncToGenerator","regenerator_default","mark","_callee","temp","wrap","_context","prev","next","find","contactDetails","salaryDetails","educationDetails","axios","patch","t0","stop","addNewEmployee","addedEmployee","view","submitAddEmployeeHandler","_callee2","createEmployeeRes","_context2","post","sent","data","response","getHrViewEmployee","hrViewEmployee","date","Math","floor","random","getDay","getMonth","EmployeeCards","add","_","pick","components_AddEmployee_AddEmployee","getHrDashboard","Navigation","Spinner_Spinner","getEmployeeView","employeeDashboard","employeeView","joinDate","accountNumber","getEmployeeDashboard","getLogin","Login_Login","inputFields","_callee3","dashboardKeyName","loginUrl","loginResponse","employeeDataUrl","employeeDataResponse","_context3","username","password","statusId","loginSuccess","get","splice","payrollDetails","bankDetails","taxDetails","_objectSpread3","edit","marginTop","Footer","React","Component","App","containers_Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2060c133.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Login.css';\n\nconst login = (props) => {\n    return (\n        <div className=\"login\">\n            <div className=\"container justify-content-center\" style={{height: '100vh'}}>\n                <h1 className=\"display-4 text-center\" style={{paddingTop: '15vh'}}>Log In</h1>\n                <div className=\"form-group text-center\">\n                    <input type=\"checkbox\" className=\"switch_1\" onChange={props.toggleIsHrLogin} checked={props.isHrLogin} />\n                    <small className=\"form-text text-muted\">You are Logging as {!props.isHrLogin ? 'Employee' : 'HR'}. Toggle above to change</small>\n                </div>\n                <div className=\"form\">\n                    <div className=\"form-group\">\n                        <input type=\"email\" className=\"form-control form-control-lg\"\n                               placeholder=\"Username\" name=\"username\" onChange={props.changeInputFieldsHandler} />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"password\" className=\"form-control form-control-lg\"\n                               placeholder=\"Password\" name=\"password\" onChange={props.changeInputFieldsHandler} />\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"button\" className=\"btn btn-lg btn-info btn-block mt-4\"\n                                onClick={props.submitLoginHandler}>\n                            Login\n                        </button>\n                        {props.loginError\n                            ? <div className=\"form-text text-danger text-center\">Invalid credentials, please try again.</div>\n                            : null}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default login;\n","import React from 'react';\n\nconst button = (props) => {\n    const buttonClassNames = `${props.classes ? props.classes : 'btn ml-1 text-capitalize'} ${props.active ? 'active': ''} ${props.btnColor ? props.btnColor : 'btn-dark'}`;\n    return (\n        <button className={buttonClassNames}\n                onClick={props.clicked}>\n            {props.title}\n        </button>\n    );\n};\n\nexport default button;\n","import React from 'react';\n\nimport Button from '../../UI/Button/Button';\n\nconst navigationItem = (props) => {\n    return (\n        <li className=\"nav-item\">\n            <Button\n                btnColor={\"btn-dark\"}\n                clicked={props.clicked}\n                title={props.title}\n                active={props.active}/>\n        </li>\n    );\n};\n\nexport default navigationItem;\n","import React from 'react';\n\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigation = (props) => {\n    let navigationList = [];\n    if (props.navigationItems) {\n        navigationList = props.navigationItems\n            .map((item, i) => <NavigationItem\n                clicked={item.clicked}\n                title={item.title}\n                active={item.active}\n                key={i} />);\n    }\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-5\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href={\"/\"}>Signout</a>\n                <button className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarNav\">\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav ml-auto\">\n                        {navigationList}\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default navigation;\n","import React from 'react';\n\nimport Button from '../../UI/Button/Button';\n\nconst employeeCard = (props) => {\n    return (\n        <div className=\"card mb-3\">\n            {props.empId ? <div className=\"card-header h5 text-capitalize\">employee id: {props.empId}</div> : null}\n            <div className=\"card-body\">\n                <div className=\"row\">\n                    <div className=\"col-md-7\">\n                        {props.empName ? <h4 className=\"card-title text-capitalize\">name: {props.empName}</h4> : null}\n                        {props.empAge ? <h6 className=\"card-text text-capitalize\">age: {props.empAge}</h6> : null}\n                        {props.empJoinDate ? <h6 className=\"card-text text-capitalize\">join date: {props.empJoinDate}</h6> : null}\n                        {props.empAccountNumber ? <h6 className=\"card-text text-capitalize\">account number: {props.empAccountNumber}</h6> : null}\n                    </div>\n                    <div className=\"col-md-5 text-right\">{props.cardButtons ? props.cardButtons.map((button, i) => <Button\n                            classes={button.classes}\n                            btnColor={button.btnColor}\n                            clicked={button.clicked}\n                            title={button.title}\n                            active={button.active}\n                            key={i}/>)\n                        : null}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default employeeCard;\n","import React from 'react';\n\nimport EmployeeCard from './EmployeeCard/EmployeeCard';\n\nconst employeeCards = (props) => {\n    let employeeCards = [];\n    if (props.employeeCards) {\n        employeeCards = props.employeeCards.map((card, i) => <EmployeeCard\n            empId={card.empId}\n            empName={card.empName}\n            empAge={card.empAge}\n            empJoinDate={card.empJoinDate}\n            cardButtons={card.cardButtons}\n            key={i}/>);\n    }\n    return (\n        <div className=\"container mb-3\">\n            {employeeCards}\n        </div>\n    );\n};\n\nexport default employeeCards;\n","import React from 'react';\n\nconst footer = (props) => {\n    return (\n        <footer className=\"bg-dark text-white text-white text-center py-4 mt-5 text-capitalize\">\n            Copyright &copy; {new Date().getFullYear()} {props.title ? props.title : null}\n        </footer>\n    );\n};\n\nexport default footer;\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"Loader\">Loading...</div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nconst AddEmployee = (props) => {\n    const employee = props.employee;\n    return (\n        <div className=\"container px-5\">\n            <button type=\"button\" className=\"btn btn btn-outline-dark ml-5 text-capitalize\"\n                    onClick={props.goBackHandler}>go back</button>\n            <p className=\"display-4 text-center text-capitalize\">{props.title ? props.title : 'Add Employee Details'}</p>\n            <div className=\"form px-md-5\">\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"First Name\" name=\"firstName\"\n                           defaultValue={employee && employee.firstName ? employee.firstName : null}\n                           onChange={props.changeEmployeeFieldsHandler} />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Last Name\" name=\"lastName\"\n                           defaultValue={employee && employee.lastName ? employee.lastName : null}\n                           onChange={props.changeEmployeeFieldsHandler} />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"number\" className=\"form-control\" placeholder=\"Age\" name=\"age\"\n                           defaultValue={employee && employee.age ? employee.age : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"h6 text-capitalize\">date of birth</label>\n                    <input type=\"date\" className=\"form-control\" name=\"dateOfBirth\"\n                           defaultValue={employee && employee.dateOfBirth ? employee.dateOfBirth : null}\n                           onChange={props.changeEmployeeFieldsHandler} />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Marital Status\" name=\"maritalStatus\"\n                           defaultValue={employee && employee.maritalStatus ? employee.maritalStatus : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Gender\" name=\"gender\"\n                           defaultValue={employee && employee.gender ? employee.gender : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"h6 text-capitalize\">hiring date</label>\n                    <input type=\"date\" className=\"form-control\" name=\"hiringDate\"\n                           defaultValue={employee && employee.hiringDate ? employee.hiringDate : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"h6 text-capitalize\">joining date</label>\n                    <input type=\"date\" className=\"form-control\" name=\"joiningDate\" id=\"joiningDate\"\n                           defaultValue={employee && employee.joiningDate ? employee.joiningDate : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"number\" className=\"form-control\" placeholder=\"Job Id\" name=\"jobId\"\n                           defaultValue={employee && employee.jobId ? employee.jobId : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Name of the School\" name=\"nameOfSchool\"\n                           defaultValue={employee && employee.nameOfSchool ? employee.nameOfSchool : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Degree\" name=\"degree\"\n                           defaultValue={employee && employee.degree ? employee.degree : null}\n                           onChange={props.changeEmployeeFieldsHandler} />\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"h6 text-capitalize\">start date</label>\n                    <input type=\"date\" className=\"form-control\" name=\"startDate\"\n                           defaultValue={employee && employee.startDate ? employee.startDate : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"h6 text-capitalize\">end date</label>\n                    <input type=\"date\" className=\"form-control\" name=\"endDate\"\n                           defaultValue={employee && employee.endDate ? employee.endDate : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"number\" className=\"form-control\" placeholder=\"Salary\" name=\"amount\"\n                           defaultValue={employee && employee.amount ? employee.amount : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Is monthly\" name=\"isMonthly\"\n                           defaultValue={employee && employee.isMonthly ? employee.isMonthly : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"tel\" className=\"form-control\" placeholder=\"Contact Number\" name=\"phoneNumber\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                           defaultValue={employee && employee.phoneNumber ? employee.phoneNumber : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Email\" name=\"email\"\n                           defaultValue={employee && employee.email ? employee.email : null}\n                           onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <div className=\"form-group\">\n                    <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\"\n                              defaultValue={employee && employee.address ? employee.address : null}\n                              onChange={props.changeEmployeeFieldsHandler}/>\n                </div>\n                <button type=\"button\" className=\"btn btn-lg btn-info btn-block mt-4 text-capitalize\"\n                        onClick={props.submitPatchEmployeeHandler}>{props.submitText ? props.submitText : 'Submit'}</button>\n            </div>\n        </div>\n    );\n};\n\nexport default AddEmployee;\n","import React from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport './Dashboard.css';\nimport Login from '../../components/Login/Login';\nimport Navigation from '../../components/Navigation/Navigation';\nimport EmployeeCards from '../../components/EmployeeCards/EmployeeCards';\nimport EmployeeCard from '../../components/EmployeeCards/EmployeeCard/EmployeeCard';\nimport Footer from '../../components/UI/Footer/Footer';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport AddEmployee from '../../components/AddEmployee/AddEmployee';\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputFields: {\n                username: null,\n                password: null\n            },\n            isHrLogin: false,\n            loginError: false,\n            loginSuccess: false,\n            loading: false,\n            dashboardLoading: true,\n            hrDashboard: {\n                navItems: {\n                    view: { title: 'view employees', active: false },\n                    add: { title: 'add employee', active: false },\n                },\n                employees: [],\n                updateEmployeeId: null,\n                newEmployee: {},\n            },\n            employeeDashboard: {\n                navItems: {\n                    view: { title: 'view', active: false },\n                    edit: { title: 'edit', active: false },\n                },\n                employees: [],\n            },\n        };\n    };\n\n    updatedNavItemsFor = (dashboard = 'employee', key) => {\n        dashboard += 'Dashboard';\n        this.setState((prevState) => {\n            const navItems = { ...prevState[dashboard].navItems };\n            Object.keys(navItems).forEach(key => navItems[key].active = false);\n            navItems[key].active = true;\n            return {\n                ...prevState,\n                [dashboard]: {\n                    ...prevState[dashboard],\n                    navItems,\n                    updateEmployeeId: null,\n                }\n            }\n        });\n    };\n\n    deleteEmployeeHandler = (emploeeId) => {\n        this.setState((prevState) => {\n            const employees = prevState.hrDashboard.employees.filter(employee => employee.employeeId !== emploeeId);\n            return {\n                ...prevState,\n                hrDashboard: {\n                    ...prevState.hrDashboard,\n                    employees,\n                }\n            };\n        });\n    };\n\n    updateEmployeeHandler = (emploeeId) => {\n        this.setState((prevState) => {\n            console.log(prevState) ;\n            const navItems = { ...prevState.hrDashboard.navItems };\n            Object.keys(navItems).forEach(key => navItems[key].active = false);\n            return {\n                ...prevState,\n                hrDashboard: {\n                    ...prevState.hrDashboard,\n                    navItems,\n                    updateEmployeeId: emploeeId,\n                },\n                dashboardLoading: false,\n                loading: false,\n            };\n        });\n    };\n\n    changeEmployeeFieldsHandler = (event) => {\n        if (this.state.hrDashboard.updateEmployeeId) {\n            const employees = [...this.state.hrDashboard.employees ];\n            const employeeIndex = employees.findIndex(employee => employee.employeeId === this.state.hrDashboard.updateEmployeeId);\n            const employee = employees[employeeIndex];\n            if (employee) {\n                employee[event.target.name] = event.target.value;\n            }\n            this.setState({\n                hrDashboard: {\n                    ...this.state.hrDashboard,\n                    employees,\n                },\n            });\n        } else {\n            const newEmployee = this.state.hrDashboard.newEmployee;\n            if (newEmployee) {\n                newEmployee[event.target.name] = event.target.value;\n            }\n            this.setState({\n                hrDashboard: {\n                    ...this.state.hrDashboard,\n                    newEmployee,\n                },\n            });\n        }\n    };\n\n    submitPatchEmployeeHandler = async () => {\n        try {\n            const hrDashboard = { ...this.state.hrDashboard };\n            const employee = hrDashboard.employees.find(employee => employee.employeeId === hrDashboard.updateEmployeeId);\n            if (employee) {\n                const newEmployee = employee ;\n                const temp = newEmployee ;\n                temp.contactDetails = {} ;\n                temp.salaryDetails = {} ;\n                temp.educationDetails = {} ;\n                temp.contactDetails.phoneNumber = newEmployee.phoneNumber ;\n                temp.contactDetails.email = newEmployee.email ;\n                temp.contactDetails.address = newEmployee.address ;\n                temp.educationDetails.nameOfSchool = newEmployee.nameOfSchool ;\n                temp.educationDetails.degree = newEmployee.degree\n                temp.educationDetails.startDate = newEmployee.startDate ;\n                temp.educationDetails.endDate = newEmployee.endDate ;\n                temp.salaryDetails.amount = newEmployee.amount ;\n                temp.salaryDetails.isMonthly = newEmployee.isMonthly ;\n                await axios.patch('/hr/update-employee', temp);\n                this.updatedNavItemsFor('hr', 'view');\n            } else {\n                this.updatedNavItemsFor('hr', 'view');\n            }\n        } catch (e) {\n            this.updatedNavItemsFor('hr', 'view');\n        }\n    };\n\n    addNewEmployee = (employeeId) => {\n        this.setState((prevState) => {\n            const addedEmployee = {...prevState.hrDashboard.newEmployee};\n            const employees = [...prevState.hrDashboard.employees, addedEmployee];\n            addedEmployee.employeeId = employeeId || employees.length + 1;\n            const navItems = { ...prevState.hrDashboard.navItems };\n            Object.keys(navItems).forEach(key => navItems[key].active = false);\n            navItems.view.active = true;\n            return {\n                ...prevState,\n                hrDashboard: {\n                    ...prevState.hrDashboard,\n                    navItems,\n                    employees,\n                    newEmployee: {},\n                },\n            };\n        });\n    };\n\n    submitAddEmployeeHandler = async () => {\n        try {\n            const hrDashboard = { ...this.state.hrDashboard };\n            const newEmployee = { ...hrDashboard.newEmployee };\n            if (newEmployee) {\n                const temp = newEmployee ;\n                temp.contactDetails = {} ;\n                temp.salaryDetails = {} ;\n                temp.educationDetails = {} ;\n                temp.contactDetails.phoneNumber = newEmployee.phoneNumber ;\n                temp.contactDetails.email = newEmployee.email ;\n                temp.contactDetails.address = newEmployee.address ;\n                temp.educationDetails.nameOfSchool = newEmployee.nameOfSchool ;\n                temp.educationDetails.degree = newEmployee.degree\n                temp.educationDetails.startDate = newEmployee.startDate ;\n                temp.educationDetails.endDate = newEmployee.endDate ;\n                temp.salaryDetails.amount = newEmployee.amount ;\n                temp.salaryDetails.isMonthly = newEmployee.isMonthly ;\n                const createEmployeeRes = await axios.post('/hr/create-employee', temp);\n                if (createEmployeeRes) {\n                    this.addNewEmployee(createEmployeeRes.data.response)\n                } else {\n                    this.addNewEmployee();\n                }\n            }\n        } catch (e) {\n            this.addNewEmployee();\n        }\n    };\n\n    getHrViewEmployee = () => {\n        const hrDashboard = this.state.hrDashboard;\n        let hrViewEmployee = null;\n        if (hrDashboard.navItems.view.active) {\n            const employeeCards = hrDashboard.employees.map(employee => {\n                const date = new Date();\n                return {\n                    empId: employee.employeeId,\n                    empName: `${employee.firstName} ${employee.lastName}`,\n                    empAge: employee.age ? employee.age : Math.floor(Math.random() * (53 - 21)) + 21,\n                    empJoinDate: `${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`,\n                    cardButtons: [\n                        { btnColor: 'btn-info', title: 'update', clicked: () => this.updateEmployeeHandler(employee.employeeId) },\n                        { btnColor: 'btn-danger', title: 'delete', clicked: () => this.deleteEmployeeHandler(employee.employeeId) }\n                    ],\n                }\n            });\n            hrViewEmployee = <EmployeeCards employeeCards={employeeCards} />;\n        }\n        if (hrDashboard.updateEmployeeId || hrDashboard.navItems.add.active) {\n            let employee = hrDashboard.updateEmployeeId\n                ? hrDashboard.employees.find(employee => employee.employeeId === hrDashboard.updateEmployeeId)\n                : hrDashboard.newEmployee;\n            if (hrDashboard.updateEmployeeId) {\n                employee = _.pick(employee, [\n                    'firstName', 'lastName', 'dateOfBirth', 'age',\n                    'maritalStatus', 'jobId', 'hiringDate', 'joiningDate',\n                    'nameOfSchool', 'degree', 'startDate', 'endDate',\n                    'salary', 'isMonthly', 'phoneNumber', 'email', 'address'\n                ]);\n            }\n            hrViewEmployee = (\n                <AddEmployee\n                    title={hrDashboard.updateEmployeeId ? `update employee Id: ${hrDashboard.updateEmployeeId}` : 'add employee'}\n                    submitText={hrDashboard.updateEmployeeId ? 'update employee' : 'add employee'}\n                    goBackHandler={() => this.updatedNavItemsFor('hr', 'view')}\n                    employee={employee}\n                    changeEmployeeFieldsHandler={this.changeEmployeeFieldsHandler}\n                    submitPatchEmployeeHandler={hrDashboard.updateEmployeeId ? this.submitPatchEmployeeHandler : this.submitAddEmployeeHandler}/>\n            );\n        }\n        return hrViewEmployee;\n    };\n\n    getHrDashboard = () => {\n        const hrDashboard = this.state.hrDashboard;\n        const navItems = Object.keys(hrDashboard.navItems).map(key => {\n            return {\n                ...hrDashboard.navItems[key],\n                clicked: () => this.updatedNavItemsFor('hr', key),\n            };\n        });\n        return (\n            <div>\n                <Navigation navigationItems={navItems} />\n                {this.state.dashboardLoading ? <Spinner/> : this.getHrViewEmployee()}\n            </div>\n        );\n    };\n\n    getEmployeeView = () => {\n        const employeeDashboard = this.state.employeeDashboard;\n        let employeeView = null;\n        if (employeeDashboard.navItems.view.active) {\n            const employee = _.pick(employeeDashboard.employees[0], [\n                'employeeId', 'firstName', 'lastName', 'dateOfBirth', 'age',\n                'maritalStatus', 'jobId', 'hiringDate', 'joiningDate',\n                'nameOfSchool', 'degree', 'startDate', 'endDate',\n                'salary', 'isMonthly', 'phoneNumber', 'email', 'address',\n                'accountNumber'\n            ]);\n            const date = new Date();\n            employeeView = <EmployeeCard\n                empId={employee.employeeId}\n                empName={`${employee.firstName} ${employee.lastName}`}\n                empAge={employee.age ? employee.age : Math.floor(Math.random() * (53 - 21)) + 21}\n                empJoinDate={employee.joinDate ? employee.joinDate : `${date.getDay()}-${date.getMonth()}-${date.getFullYear()}`}\n                empAccountNumber={employee.accountNumber}\n            />;\n        }\n        return (\n            <div className=\"container\">\n                {employeeView}\n            </div>\n        );\n    };\n\n    getEmployeeDashboard = () => {\n        const employeeDashboard = this.state.employeeDashboard;\n        const navItems = Object.keys(employeeDashboard.navItems).map(key => {\n            return {\n                ...employeeDashboard.navItems[key],\n                clicked: () => this.updatedNavItemsFor('employee', key),\n            };\n        });\n        return (\n            <div>\n                <Navigation navigationItems={navItems} />\n                {this.state.dashboardLoading ? <Spinner/> : this.getEmployeeView()}\n            </div>\n        );\n    };\n\n    render() {\n        let dashboard = this.getLogin();\n        if (this.state.loading) {\n            dashboard = <div style={{marginTop: '36vh'}}>\n                <Spinner />\n            </div>;\n        }\n        if (this.state.loginSuccess) {\n            dashboard = (\n                <div>\n                    {this.state.isHrLogin ? this.getHrDashboard() : this.getEmployeeDashboard()}\n                    <Footer />\n                </div>\n            );\n        }\n        return dashboard;\n    }\n\n    getLogin = () => {\n        return (\n            <Login\n                isHrLogin={this.state.isHrLogin}\n                loginError={this.state.loginError}\n                toggleIsHrLogin={this.toggleIsHrLogin}\n                changeInputFieldsHandler={this.changeInputFieldsHandler}\n                submitLoginHandler={(event) => this.submitLoginHandler(event, this.state.inputFields)}\n            />\n        );\n    };\n\n    submitLoginHandler = async () => {\n        this.setState({ loading: true });\n        const dashboardKeyName = `${this.state.isHrLogin ? 'hr' : 'employee'}Dashboard`;\n        const loginUrl = `/login/${this.state.isHrLogin ? 'hr' : 'payroll'}-login`;\n        try {\n            const loginResponse = await axios.post(loginUrl, {\n                key: this.state.inputFields.username,\n                value: this.state.inputFields.password,\n            });\n            if (loginResponse && loginResponse.data && loginResponse.data.statusId) {\n                this.setState({ loginError: false, loginSuccess: true, loading: false });\n                const employeeDataUrl = this.state.isHrLogin\n                    ? '/hr/get-employees'\n                    : `/payroll/get-employee-details?employeeId=${this.state.inputFields.username}`;\n                const employeeDataResponse = await axios.get(employeeDataUrl);\n                if (employeeDataResponse) {\n                    const employees = this.state.isHrLogin\n                        ? employeeDataResponse.data.response.splice(0, 40)\n                        : [{\n                            ...employeeDataResponse.data.response.payrollDetails,\n                            ...employeeDataResponse.data.response.bankDetails,\n                            ...employeeDataResponse.data.response.taxDetails,\n                        }];\n                    this.setState((prevState) => {\n                        const navItems = {\n                            ...prevState[dashboardKeyName].navItems,\n                            view: {\n                                ...prevState[dashboardKeyName].navItems.view,\n                                active: true,\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            [dashboardKeyName]: {\n                                ...prevState[dashboardKeyName],\n                                navItems,\n                                employees,\n                            },\n                            dashboardLoading: false,\n                        };\n                    });\n                } else {\n                    this.setState({ dashboardLoading: true });\n                }\n            } else {\n                this.setState({ loginError: true, loginSuccess: false, loading: false });\n            }\n        } catch (e) {\n            this.setState({ loginError: true, loginSuccess: false, loading: false });\n        }\n    };\n\n    changeInputFieldsHandler = (event) => {\n        let inputFields = {...this.state.inputFields};\n        inputFields[event.target.name] = event.target.value;\n        this.setState({\n            inputFields\n        });\n    };\n\n    toggleIsHrLogin = () => {\n        this.setState((prevState) => {\n            return { isHrLogin: !prevState.isHrLogin };\n        });\n    };\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\n\nimport Dashboard from './containers/Dashboard/Dashboard';\n\nclass App extends Component {\n  render() {\n    return <Dashboard/>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}